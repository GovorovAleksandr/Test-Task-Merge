//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Game/Gameplay/Input/Gameplay.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Game.Gameplay
{
    public partial class @Input: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Input()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Gameplay"",
    ""maps"": [
        {
            ""name"": ""ItemMover"",
            ""id"": ""19384795-d7ab-4b1d-b7e1-0ae7587fe075"",
            ""actions"": [
                {
                    ""name"": ""Contact"",
                    ""type"": ""Button"",
                    ""id"": ""855a0177-04f5-4276-83b0-5030f36455a3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""24b65135-e490-485e-82f2-543c94135c54"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""be08243c-4a4e-4207-8e33-58c864233be0"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Contact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0431ab8c-1b1a-4d0b-ac44-86fdf4e7b267"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Phone"",
                    ""action"": ""Contact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""899fc560-4a64-4c45-adf3-76cb75e95614"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Phone"",
            ""bindingGroup"": ""Phone"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // ItemMover
            m_ItemMover = asset.FindActionMap("ItemMover", throwIfNotFound: true);
            m_ItemMover_Contact = m_ItemMover.FindAction("Contact", throwIfNotFound: true);
            m_ItemMover_Move = m_ItemMover.FindAction("Move", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // ItemMover
        private readonly InputActionMap m_ItemMover;
        private List<IItemMoverActions> m_ItemMoverActionsCallbackInterfaces = new List<IItemMoverActions>();
        private readonly InputAction m_ItemMover_Contact;
        private readonly InputAction m_ItemMover_Move;
        public struct ItemMoverActions
        {
            private @Input m_Wrapper;
            public ItemMoverActions(@Input wrapper) { m_Wrapper = wrapper; }
            public InputAction @Contact => m_Wrapper.m_ItemMover_Contact;
            public InputAction @Move => m_Wrapper.m_ItemMover_Move;
            public InputActionMap Get() { return m_Wrapper.m_ItemMover; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ItemMoverActions set) { return set.Get(); }
            public void AddCallbacks(IItemMoverActions instance)
            {
                if (instance == null || m_Wrapper.m_ItemMoverActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_ItemMoverActionsCallbackInterfaces.Add(instance);
                @Contact.started += instance.OnContact;
                @Contact.performed += instance.OnContact;
                @Contact.canceled += instance.OnContact;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }

            private void UnregisterCallbacks(IItemMoverActions instance)
            {
                @Contact.started -= instance.OnContact;
                @Contact.performed -= instance.OnContact;
                @Contact.canceled -= instance.OnContact;
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
            }

            public void RemoveCallbacks(IItemMoverActions instance)
            {
                if (m_Wrapper.m_ItemMoverActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IItemMoverActions instance)
            {
                foreach (var item in m_Wrapper.m_ItemMoverActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_ItemMoverActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public ItemMoverActions @ItemMover => new ItemMoverActions(this);
        private int m_PCSchemeIndex = -1;
        public InputControlScheme PCScheme
        {
            get
            {
                if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
                return asset.controlSchemes[m_PCSchemeIndex];
            }
        }
        private int m_PhoneSchemeIndex = -1;
        public InputControlScheme PhoneScheme
        {
            get
            {
                if (m_PhoneSchemeIndex == -1) m_PhoneSchemeIndex = asset.FindControlSchemeIndex("Phone");
                return asset.controlSchemes[m_PhoneSchemeIndex];
            }
        }
        public interface IItemMoverActions
        {
            void OnContact(InputAction.CallbackContext context);
            void OnMove(InputAction.CallbackContext context);
        }
    }
}
